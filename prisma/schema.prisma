// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums convertidos para strings devido à limitação do SQLite
// UserRole: ATHLETE, SCOUT, FAN, ADMIN
// Position: GK, DF, MF, FW  
// ProductCategory: CLOTHING, ACCESSORIES, EQUIPMENT, MEMORABILIA

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  passwordHash String
  role        String   @default("FAN")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Profile information
  profile     Profile?
  
  // Relationships
  posts       Post[]
  comments    Comment[]
  orders      Order[]
  reviews     Review[]
  likes       Like[]

  @@map("users")
}

model Profile {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  firstName   String
  lastName    String
  bio         String?
  avatar      String?
  phone       String?
  location    String?
  dateOfBirth DateTime?
  
  // Social links
  instagram   String?
  twitter     String?
  linkedin    String?
  
  // For athletes
  position    String?
  teamId      String?
  team        Team?    @relation(fields: [teamId], references: [id])
  age         Int?
  height      Float?   // in cm
  weight      Float?   // in kg
  dominantFoot String? // LEFT, RIGHT, BOTH
  
  // For scouts
  company     String?
  experience  Int?     // years of experience
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles")
}

model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  city        String?
  state       String?
  country     String?
  logo        String?
  founded     Int?
  description String?
  website     String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  players     Profile[]
  posts       Post[]

  @@map("teams")
}

model Post {
  id          String   @id @default(cuid())
  title       String
  content     String
  image       String?
  published   Boolean  @default(true)
  
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  teamId      String?
  team        Team?    @relation(fields: [teamId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  comments    Comment[]
  likes       Like[]

  @@map("posts")
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  authorId    String
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId      String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("comments")
}

model Like {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId      String
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())

  @@unique([userId, postId])
  @@map("likes")
}

model Product {
  id          String          @id @default(cuid())
  name        String
  description String
  price       Float
  category    String
  image       String?
  stock       Int             @default(0)
  featured    Boolean         @default(false)
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relationships
  orderItems  OrderItem[]
  reviews     Review[]

  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  
  status      String      @default("PENDING") // PENDING, PROCESSING, SHIPPED, DELIVERED, CANCELLED
  total       Float
  shippingAddress String
  notes       String?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float    // price at time of purchase
  
  @@map("order_items")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 stars
  comment     String?
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, productId])
  @@map("reviews")
}
